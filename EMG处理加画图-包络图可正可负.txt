%% 0. 初始化环境 | Environment Initialization
clc;                        % 清空命令窗口 | Clear command window

% 读取EMG信号数据 | Read EMG signal data
signal = EMG;

% 设置采样频率（根据实际EMG设备参数修改！）| Set sampling frequency (modify according to device specs)
fs = 10000; % 示例值，需根据实际采样率修改 | Example value, modify according to actual sampling rate

% 计算时间轴 | Calculate time axis
time = (0:length(signal)-1) / fs;

%% 1. 信号预处理 | Signal Preprocessing
% 1.1 带通滤波去除噪声 | Bandpass filtering to remove noise
fc_low = 20; % 低频截止频率 | Low-frequency cutoff
fc_high = 450; % 高频截止频率 | High-frequency cutoff
[b, a] = butter(4, [fc_low/(fs/2) fc_high/(fs/2)], 'bandpass'); % 设计巴特沃斯带通滤波器 | Design Butterworth bandpass filter
filtered_signal = filtfilt(b, a, signal); % 应用滤波器 | Apply filter

% 1.2 全波整流和线性包络 | Full-wave rectification and linear envelope
rectified_signal = abs(filtered_signal); % 对信号进行全波整流 | Full-wave rectification of signal
fc_env = 5; % 包络滤波器截止频率 | Envelope filter cutoff frequency
[b_env, a_env] = butter(4, fc_env/(fs/2), 'low'); % 设计低通滤波器 | Design lowpass filter
envelope_signal = filtfilt(b_env, a_env, rectified_signal); % 应用滤波器得到包络 | Apply filter to get envelope

%% 2. 静息区和活动区识别 | Rest and Activity Zone Identification
% 设置阈值区分静息和活动状态 | Set threshold to distinguish between rest and activity states
threshold = 0.1 * max(envelope_signal); % 阈值设为包络信号最大值的10% | Threshold set to 10% of max envelope value
is_activity = envelope_signal > threshold; % 标记活动区域 | Mark activity zones

% 找到活动区的起始和结束位置 | Find the start and end positions of activity zones
activity_start = find(diff([0; is_activity]) == 1); % 检测活动区起始点 | Detect activity zone starts
activity_end = find(diff([is_activity; 0]) == -1); % 检测活动区结束点 | Detect activity zone ends

% 验证活动区数量 | Validate activity zones count
num_activities = 5; % 预期活动区数量 | Expected number of activity zones
if length(activity_start) ~= num_activities || length(activity_end) ~= num_activities
    error('活动区数量与预期不一致，请检查数据或调整阈值 | Number of activity zones inconsistent with expectations, check data or adjust threshold');
end

%% 3. 计算每个活动区的功率信噪比和幅值信噪比 | Calculate Power SNR and Amplitude SNR for Each Activity Zone
% 初始化存储每个活动区功率SNR和幅值SNR的数组 | Initialize arrays to store power SNR and amplitude SNR for each activity zone
power_snr_values = zeros(num_activities, 1);
amplitude_snr_values = zeros(num_activities, 1);

% 创建结果表格 | Create results table
results_table = table('Size', [num_activities + 2, 3], 'VariableTypes', {'cell', 'double', 'double'}, 'VariableNames', {'ActivityZone', 'Power_SNR_dB', 'Amplitude_SNR_dB'});

% 遍历每个活动区并计算对应的SNR | Iterate over each activity zone and calculate the corresponding SNR
for i = 1:num_activities
    % 当前活动区 | Current activity zone
    activity_zone = signal(activity_start(i):activity_end(i));
    
    % 前静息区 | Rest zone before the current activity zone
    if i == 1
        rest_zone_before = signal(1:activity_start(i)-1);
    else
        rest_zone_before = signal(activity_end(i-1)+1:activity_start(i)-1);
    end
    
    % 后静息区 | Rest zone after the current activity zone
    if i == num_activities
        rest_zone_after = signal(activity_end(i)+1:end);
    else
        rest_zone_after = signal(activity_end(i)+1:activity_start(i+1)-1);
    end
    
    % 计算当前活动区的信号功率和均方根值 | Calculate signal power and RMS for the current activity zone
    signal_power = var(activity_zone); % 信号功率 | Signal power
    signal_rms = rms(activity_zone); % 信号均方根值 | Signal RMS
    
    % 计算静息区的噪声功率和均方根值 | Calculate noise power and RMS for rest zones
    noise_power_before = var(rest_zone_before); % 前静息区噪声功率 | Noise power of rest zone before
    noise_rms_before = rms(rest_zone_before); % 前静息区噪声均方根值 | Noise RMS of rest zone before
    
    noise_power_after = var(rest_zone_after); % 后静息区噪声功率 | Noise power of rest zone after
    noise_rms_after = rms(rest_zone_after); % 后静息区噪声均方根值 | Noise RMS of rest zone after
    
    % 取两个静息区的平均噪声功率和均方根值 | Take the average noise power and RMS from both rest zones
    noise_power = mean([noise_power_before, noise_power_after]);
    noise_rms = mean([noise_rms_before, noise_rms_after]);
    
    % 计算当前活动区的功率信噪比 | Calculate power SNR for the current activity zone
    if noise_power == 0
        power_snr_db = Inf; % 如果噪声功率为0，信噪比设为无穷大 | If noise power is 0, set SNR to infinity
    else
        power_snr_db = 10 * log10(signal_power / noise_power); % 功率信噪比计算公式 | Power SNR calculation formula
    end
    
    % 计算当前活动区的幅值信噪比 | Calculate amplitude SNR for the current activity zone
    if noise_rms == 0
        amplitude_snr_db = Inf; % 如果噪声均方根值为0，信噪比设为无穷大 | If noise RMS is 0, set SNR to infinity
    else
        amplitude_snr_db = 20 * log10(signal_rms / noise_rms); % 幅值信噪比计算公式 | Amplitude SNR calculation formula
    end
    
    % 存储当前活动区的功率SNR和幅值SNR | Store power SNR and amplitude SNR for the current activity zone
    power_snr_values(i) = power_snr_db;
    amplitude_snr_values(i) = amplitude_snr_db;
    
    % 显示当前活动区的功率SNR和幅值SNR | Display power SNR and amplitude SNR for the current activity zone
    fprintf('活动区%d的功率信噪比(SNR)为: %.2f dB\n', i, power_snr_db);
    fprintf('活动区%d的幅值信噪比(SNR)为: %.2f dB\n', i, amplitude_snr_db);
    fprintf('\n');
    
    % 更新结果表格 | Update results table
    results_table.ActivityZone{i} = sprintf('活动区%d', i);
    results_table.Power_SNR_dB(i) = power_snr_db;
    results_table.Amplitude_SNR_dB(i) = amplitude_snr_db;
end

% 计算所有活动区的平均SNR值 | Calculate average SNR values across all activity zones
average_power_snr_db = mean(power_snr_values);
average_amplitude_snr_db = mean(amplitude_snr_values);

% 将平均值添加到结果表格 | Add average values to results table
results_table.ActivityZone{num_activities + 1} = '平均功率信噪比'; % Average Power SNR
results_table.Power_SNR_dB(num_activities + 1) = average_power_snr_db;
results_table.Amplitude_SNR_dB(num_activities + 1) = NaN; % 用NaN表示不适用 | Use NaN to indicate not applicable

results_table.ActivityZone{num_activities + 2} = '平均幅值信噪比'; % Average Amplitude SNR
results_table.Power_SNR_dB(num_activities + 2) = NaN; % 用NaN表示不适用 | Use NaN to indicate not applicable
results_table.Amplitude_SNR_dB(num_activities + 2) = average_amplitude_snr_db;

fprintf('所有活动区的平均功率信噪比(SNR)为: %.2f dB\n', average_power_snr_db);
fprintf('所有活动区的平均幅值信噪比(SNR)为: %.2f dB\n', average_amplitude_snr_db);

%% 4. 可视化信号和识别结果 | Visualize Signals and Identification Results
% 创建三个子图组成的大图 | Create a combined plot with three subplots
figure;

% 原始EMG信号 | Raw EMG Signal
subplot(3,1,1);
plot(time, signal);
title('Raw EMG Signal');
xlabel('Time (s)');
ylabel('Amplitude (mV)');

% 滤波后的信号 | Filtered Signal
subplot(3,1,2);
plot(time, filtered_signal);
title('Filtered Signal');
xlabel('Time (s)');
ylabel('Amplitude (mV)');

% 线性包络及活动区识别 | Linear Envelope and Activity Zone Identification
subplot(3,1,3);
plot(time, envelope_signal);
hold on;
for i = 1:num_activities
    start_time = (activity_start(i) - 1) / fs;
    end_time = (activity_end(i) - 1) / fs;
    % 使用圆圈标记活动区起始和结束 | Mark activity zone start and end with circles
    plot(start_time, envelope_signal(activity_start(i)), 'ro'); 
    plot(end_time, envelope_signal(activity_end(i)), 'go'); 
end
title('Linear Envelope and Activity Zone Identification');
xlabel('Time (s)');
ylabel('Amplitude (mV)');
legend('Envelope', 'Activity Zone Start', 'Activity Zone End');

% 保存三个子图组成的大图为JPG格式 | Save the combined plot as JPG
saveas(gcf, 'Three_Subplots.jpg');

% 单独保存每个子图 | Save each subplot individually
% 原始EMG信号 | Raw EMG Signal
figure;
plot(time, signal);
title('Raw EMG Signal');
xlabel('Time (s)');
ylabel('Amplitude (mV)');
saveas(gcf, 'Raw_EMG_Signal.jpg');
close(gcf);

% 滤波后的信号 | Filtered Signal
figure;
plot(time, filtered_signal);
title('Filtered Signal');
xlabel('Time (s)');
ylabel('Amplitude (mV)');
saveas(gcf, 'Filtered_EMG_Signal.jpg');
close(gcf);

% 线性包络及活动区识别 | Linear Envelope and Activity Zone Identification
figure;
plot(time, envelope_signal);
hold on;
for i = 1:num_activities
    start_time = (activity_start(i) - 1) / fs;
    end_time = (activity_end(i) - 1) / fs;
    % 使用圆圈标记活动区起始和结束 | Mark activity zone start and end with circles
    plot(start_time, envelope_signal(activity_start(i)), 'ro'); 
    plot(end_time, envelope_signal(activity_end(i)), 'go'); 
end
title('Linear Envelope and Activity Zone Identification');
xlabel('Time (s)');
ylabel('Amplitude (mV)');
legend('Envelope', 'Activity Zone Start', 'Activity Zone End');
saveas(gcf, 'Envelope_Activity_Zones.jpg');
close(gcf);

%% 5. 数据导出 | Data Export
% 检查数据长度 | Check data lengths
data_length = length(signal);
if ~isequal(data_length, length(filtered_signal), length(envelope_signal), length(time))
    error('数据长度不一致，无法导出 | Data length mismatch: time(%d) signal(%d) filtered(%d) envelope(%d)',...
          length(time), length(signal), length(filtered_signal), length(envelope_signal));
end

% 创建包含时间轴的导出数据 | Create export data with time axis
export_data = [time(:), signal(:), filtered_signal(:), envelope_signal(:)];

% 导出原始数据 | Export raw data
writetable(results_table, 'SNR_Results.csv');  % SNR结果表格 | SNR results

% 导出处理后的数据到TXT文件，并添加题头 | Export processed data to TXT with header
headers = {'Time(s)', 'Raw_EMG', 'Filtered_EMG', 'Envelope'};
writecell(headers, 'EMG_Data.txt', 'Delimiter', 'tab');
writematrix(export_data, 'EMG_Data.txt', 'Delimiter', 'tab', 'WriteMode', 'append');
disp('数据已导出为 SNR_Results.csv 和 EMG_Data.txt | Data exported as SNR_Results.csv and EMG_Data.txt');

% 显示可复制的SNR表格 | Display copy-friendly SNR table
disp('===== 可复制的SNR结果表格 | Copy-friendly SNR Results Table =====');
disp(results_table(:,{'ActivityZone','Power_SNR_dB','Amplitude_SNR_dB'}));